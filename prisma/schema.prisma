// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Committee {
    id          String            @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    slug        String            @unique
    description String
    role        String
    email       String            @unique
    members     CommitteeMember[]
    image       String
    order       Int
    updatedAt   DateTime          @updatedAt
}

model CommitteeMember {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Restrict)
    name        String    @default("")
    nickName    String    @default("")
    email       String
    phone       String    @default("")
    role        String
    image       String    @default("")
    order       Int       @default(0)
    updatedAt   DateTime  @updatedAt
    committeeId String    @db.ObjectId
}

// Next Auth models
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
