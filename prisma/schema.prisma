// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Committee {
    id             String            @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    slug           String            @unique
    description    String
    role           String
    email          String            @unique
    members        CommitteeMember[]
    image          String            @default("")
    order          Int
    electionPeriod Int               @default(1)
    updatedAt      DateTime          @updatedAt
}

model CommitteeMember {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    committee       Committee         @relation(fields: [committeeId], references: [id], onDelete: Restrict)
    name            String            @default("")
    nickName        String            @default("")
    email           String
    phone           String            @default("")
    role            String
    image           String            @default("")
    order           Int               @default(0)
    updatedAt       DateTime          @updatedAt
    committeeId     String            @db.ObjectId
    ZaloonenBooking ZaloonenBooking[]
}

model Document {
    id      String        @id @default(auto()) @map("_id") @db.ObjectId
    title   String        @unique
    url     String
    isPDF   Boolean       @default(false)
    group   DocumentGroup @relation(fields: [groupId], references: [id], onDelete: Restrict)
    groupId String        @db.ObjectId
}

model DocumentGroup {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String     @unique
    extraText String     @default("")
    Document  Document[]
}

// Next Auth models
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model ProgramBoardMember {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    role      String
    phone     String   @default("")
    email     String
    url       String
    image     String   @default("")
    order     Int      @default(0)
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String         @default("")
    admin         Boolean        @default(false)
    roles         AccountRoles[]
    accounts      Account[]
    sessions      Session[]
}

enum AccountRoles {
    ZALOONEN
    CREATE_POST
    MODIFY_ROLES
    MODIFY_DOCUMENTS
}

model ZaloonenBooking {
    id                 String                @id @default(auto()) @map("_id") @db.ObjectId
    eventName          String
    eventDescription   String
    organizerEmail     String
    organizerName      String
    organizerPhone     String
    inChargeName       String
    inChargeEmail      String
    inChargePhone      String
    primaryStartDate   DateTime
    primaryEndDate     DateTime
    secondaryStartDate DateTime
    secondaryEndDate   DateTime
    hasServingPermit   Boolean
    status             ZaloonenBookingStatus @default(NEW)
    updatedAt          DateTime              @updatedAt
    updatedById        String?               @db.ObjectId
    updatedBy          CommitteeMember?      @relation(fields: [updatedById], references: [id], onDelete: SetNull)
    createdAt          DateTime              @default(now())
}

enum ZaloonenBookingStatus {
    NEW
    APPROVED
    REJECTED
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
