// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Committee {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    documentId String? @db.ObjectId

    name        String
    description String
    image       String                @default("")
    socialLinks CommitteeSocialLink[]

    slug           String        @unique
    role           String
    email          String        @unique
    order          Int
    electionPeriod Int           @default(1)
    committeeType  CommitteeType @default(COMMITTEE)

    members      CommitteeMember[]
    oldCommittee OldCommittee[]
    document     Document?         @relation(fields: [documentId], references: [id])

    updatedAt DateTime @updatedAt
}

enum CommitteeType {
    COMMITTEE
    SUB_COMMITTEE
    WORKING_GROUP
    OTHER
}

type CommitteeSocialLink {
    url         String
    iconVariant IconEnum
    order       Int      @default(100)
}

enum IconEnum {
    FACEBOOK
    MAIL
    LINK
    INSTAGRAM
    LINKEDIN
    SPOTIFY
    TIKTOK
    TWITCH
    YOUTUBE
    XTWITTER
    THREADS
    CAMERA
    QUESTIONMARK
    HOME
    DOCUEMNT
}

model OldCommittee {
    id                   String @id @default(auto()) @map("_id") @db.ObjectId
    belongsToCommitteeId String @db.ObjectId

    name    String
    year    Int
    image   String      @default("")
    logo    String      @default("")
    members OldMember[]

    belongsToCommittee Committee @relation(fields: [belongsToCommitteeId], references: [id], onDelete: Restrict)

    updatedAt DateTime @updatedAt
}

type OldMember {
    name     String
    nickName String @default("")
    role     String @default("")
    order    Int    @default(0)
}

model CommitteeMember {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    committeeId String  @db.ObjectId
    userId      String? @db.ObjectId

    name     String @default("")
    nickName String @default("")
    phone    String @default("")
    image    String @default("")
    order    Int    @default(0)

    role  String
    email String

    committee                     Committee         @relation(fields: [committeeId], references: [id], onDelete: Restrict)
    user                          User?             @relation(fields: [userId], references: [id])
    latestUpdatedZaloonenBookings ZaloonenBooking[]

    updatedAt DateTime @updatedAt
}

model ZenithMedia {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title String
    year  Int
    url   String  @unique
    isPDF Boolean
    image String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Document {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    groupId String @db.ObjectId

    title String  @unique
    url   String
    isPDF Boolean @default(false)

    group              DocumentGroup @relation(fields: [groupId], references: [id], onDelete: Restrict)
    linkedToCommittees Committee[]
}

model DocumentGroup {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name      String @unique
    extraText String @default("")

    Document Document[]
}

model ProgramBoardMember {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name  String
    email String
    phone String @default("")
    image String @default("")
    url   String
    role  String
    order Int    @default(0)

    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model ZaloonenBooking {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    updatedById String? @db.ObjectId

    organizerName    String
    organizerEmail   String
    eventName        String
    eventType        ZaloonenBookingEventTypes
    eventDescription String
    bookingType      ZaloonenBookingTypes

    primaryStartDateTime   DateTime
    primaryEndDateTime     DateTime
    secondaryStartDateTime DateTime?
    secondaryEndDateTime   DateTime?

    partyManagerName  String
    partyManagerEmail String
    partyManagerPhone String
    hasServingPermit  Boolean

    partyNoticeSent       Boolean
    bookingStatus         ZaloonenBookingStatus
    approvedStartDateTime DateTime?
    approvedEndDateTime   DateTime?

    primaryDateConflicts     ZaloonenBooking[] @relation("BookingConflicts", fields: [primaryDateConflictIds], references: [id])
    primaryDateConflictIds   String[]          @db.ObjectId
    secondaryDateConflicts   ZaloonenBooking[] @relation("BookingConflicts", fields: [secondaryDateConflictIds], references: [id])
    secondaryDateConflictIds String[]          @db.ObjectId

    updatedBy CommitteeMember? @relation(fields: [updatedById], references: [id])
    updatedAt DateTime         @updatedAt
    createdAt DateTime         @default(now())
}

enum ZaloonenBookingEventTypes {
    OFFICIAL
    INTERNAL
    OTHER_WITH_Z
    OTHER_WITHOUT_Z
}

enum ZaloonenBookingTypes {
    ALL
    KITCHEN
    APPLIANCES
}

enum ZaloonenBookingStatus {
    INITIAL
    APPROVED_FIRST_DATETIME
    APPROVED_SECOND_DATETIME
    DENIED
    AWAITING_CLEANING
    ON_HOLD
    COMPLEATED
}

// Next Auth models
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String    @default("")
    accounts      Account[]
    sessions      Session[]

    roles            AccountRoles[]
    committeeMembers CommitteeMember[]
}

enum AccountRoles {
    CREATE_POST
    ORGANIZATION_MANAGEMENT
    MODIFY_DOCUMENTS
    MODIFY_PROGRAM_BOARD
    MODIFY_ZENITH_MEDIA
    MODIFY_ZALOONEN_BOOKING
    ADMIN
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
