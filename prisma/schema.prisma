// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Committee {
    id             String            @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    slug           String            @unique
    description    String
    role           String
    email          String            @unique
    members        CommitteeMember[]
    image          String?
    order          Int
    electionPeriod Int               @default(1)
    updatedAt      DateTime          @updatedAt
}

model CommitteeMember {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Restrict)
    name        String    @default("")
    nickName    String    @default("")
    email       String
    phone       String    @default("")
    role        String
    image       String?   @default("")
    order       Int       @default(0)
    updatedAt   DateTime  @updatedAt
    committeeId String    @db.ObjectId
}

model Document {
    id      String        @id @default(auto()) @map("_id") @db.ObjectId
    title   String        @unique
    url     String
    isPDF   Boolean       @default(false)
    group   DocumentGroup @relation(fields: [groupId], references: [id], onDelete: Restrict)
    groupId String        @db.ObjectId
}

model DocumentGroup {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    name      String     @unique
    extraText String     @default("")
    Document  Document[]
}

// Next Auth models
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model programBoardMember {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    role      String
    phone     String
    email     String
    url       String
    image     String?  @default("")
    order     Int      @default(0)
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    admin         Boolean        @default(false)
    roles         AccountRoles[]
    accounts      Account[]
    sessions      Session[]
}

enum AccountRoles {
    ZALOONEN
    CREATE_POST
    MODIFY_ROLES
    MODIFY_DOCUMENTS
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
